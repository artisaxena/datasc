{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled1.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyOLAuMEUL0aNQQvDT7DPKca",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/artisaxena/datasc/blob/master/Untitled1.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MO21f44NiDL2",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "\n",
        "import csv\n",
        "\n",
        "\n",
        "def read_csv_as_list_dict(filename, separator, quote):\n",
        "    table = []\n",
        "    with open(filename, newline='') as csvfile:\n",
        "        csvreader = csv.DictReader(csvfile, delimiter=separator, quotechar=quote)\n",
        "        for row in csvreader:\n",
        "            table.append(row)\n",
        "    return table\n",
        "\n",
        "\n",
        "def read_csv_as_nested_dict(filename, keyfield, separator, quote):\n",
        "    table = {}\n",
        "    with open(filename, newline='') as csvfile:\n",
        "        csvreader = csv.DictReader(csvfile, delimiter=separator, quotechar=quote)\n",
        "        for row in csvreader:\n",
        "            rowid = row[keyfield]\n",
        "            table[rowid] = row\n",
        "    return table\n",
        "\n",
        "MINIMUM_AB = 500\n",
        "\n",
        "def batting_average(info, batting_stats):\n",
        "    hits = float(batting_stats[info[\"hits\"]])\n",
        "    at_bats = float(batting_stats[info[\"atbats\"]])\n",
        "    if at_bats >= MINIMUM_AB:\n",
        "        return hits / at_bats\n",
        "    else:\n",
        "        return 0\n",
        "\n",
        "def onbase_percentage(info, batting_stats):\n",
        "    hits = float(batting_stats[info[\"hits\"]])\n",
        "    at_bats = float(batting_stats[info[\"atbats\"]])\n",
        "    walks = float(batting_stats[info[\"walks\"]])\n",
        "    if at_bats >= MINIMUM_AB:\n",
        "        return (hits + walks) / (at_bats + walks)\n",
        "    else:\n",
        "        return 0\n",
        "\n",
        "def slugging_percentage(info, batting_stats):\n",
        "    hits = float(batting_stats[info[\"hits\"]])\n",
        "    doubles = float(batting_stats[info[\"doubles\"]])\n",
        "    triples = float(batting_stats[info[\"triples\"]])\n",
        "    home_runs = float(batting_stats[info[\"homeruns\"]])\n",
        "    singles = hits - doubles - triples - home_runs\n",
        "    at_bats = float(batting_stats[info[\"atbats\"]])\n",
        "    if at_bats >= MINIMUM_AB:\n",
        "        return (singles + 2 * doubles + 3 * triples + 4 * home_runs) / at_bats\n",
        "    else:\n",
        "        return 0\n",
        "\n",
        "\n",
        "\n",
        "def filter_by_year(statistics, year, yearid):\n",
        "    filtered_statistics = []\n",
        "    for dictionary in statistics:\n",
        "        if dictionary[yearid] == str(year):\n",
        "            filtered_statistics.append(dictionary)\n",
        "        \n",
        "    return filtered_statistics\n",
        "    \n",
        "\n",
        "def top_player_ids(info, statistics, formula, numplayers):\n",
        "top_player_list= []\n",
        "    for item in statistics:\n",
        "        player = (item['playerID'],formula(info,item))\n",
        "        top_player_list.append(player)\n",
        "        \n",
        "    sorted_list = sorted(top_player_list,key=lambda stat:stat[1], reverse=True)\n",
        "    return sorted_list\n",
        "\n",
        "\n",
        "def lookup_player_names(info, top_ids_and_stats):\n",
        "    player_names = []\n",
        "    input_data = read_csv_as_nested_dict(info[\"masterfile\"],\n",
        "                                         info[\"playerid\"],\n",
        "                                         info[\"separator\"],\n",
        "                                         info[\"quote\"])\n",
        "    \n",
        "    for line in top_ids_and_stats:\n",
        "        player = line[0]\n",
        "        if player in input_data:\n",
        "            first_name = input_data[player][\"firstname\"]          \n",
        "            last_name = input_data[player][\"lastname\"]       \n",
        "            answer = \"{:.3f} --- {} {}\".format(line[1], first_name, last_name)\n",
        "            player_names.append(answer)\n",
        "\n",
        "    return player_names\n",
        "    return []\n",
        "\n",
        "\n",
        "def compute_top_stats_year(info, formula, numplayers, year):\n",
        "    \n",
        "    list_dict = read_csv_as_list_dict(info[\"masterfile\"], info[\"separator\"], info[\"quote\"])\n",
        "    filtered_stats = filter_by_year(list_dict, year, info[\"yearid\"])\n",
        "    ranked_players = top_player_ids(info, filtered_stats, formula, numplayers)\n",
        "    players_final_list = lookup_player_names(info, ranked_players)\n",
        "    return players_final_list\n",
        "\n",
        "\n",
        "\n",
        "def aggregate_by_player_id(statistics, playerid, fields):\n",
        "    dict = {}\n",
        "    result = {}\n",
        "\n",
        "    for dic in statistics:\n",
        "        if not(dic[playerid] in dict.keys()):\n",
        "            dict[dic[playerid]] = {playerid:dic[playerid]}\n",
        "            continue\n",
        "        for field in fields:\n",
        "            dict[dic[playerid]][field] = str(int(dict[dic[playerid]][field]) + int(dic[field]))\n",
        "    print('dict', dict)\n",
        "\n",
        "    for outerk in dict.keys():\n",
        "        result[outerk] = {}\n",
        "        for innerk in dict[outerk]:\n",
        "            result[outerk].update({playerid : outerk})\n",
        "            if innerk in fields:\n",
        "                print('dict[outerk][innerk]', dict[outerk][innerk])\n",
        "                result[outerk][innerk] = dict[outerk][innerk]\n",
        "    print('result', result)\n",
        "    return result\n",
        "    \n",
        "\n",
        "\n",
        "def compute_top_stats_career(info, formula, numplayers):\n",
        "   \n",
        "    list_of_strings=[]\n",
        "    \n",
        "    filename = info['battingfile']\n",
        "    separator = info['separator']\n",
        "    quote = info['quote']\n",
        "    statistics = read_csv_as_list_dict(filename, separator, quote)\n",
        "    \n",
        "    playerid=info['playerid']\n",
        "    \n",
        "    if formula==batting_average:\n",
        "        fields=[info['battingfields'][0], info['battingfields'][1]]\n",
        "    elif formula==onbase_percentage:\n",
        "        fields=[info['battingfields'][0], info['battingfields'][1], info['battingfields'][5]]\n",
        "    else:\n",
        "        fields=[info['battingfields'][0], info['battingfields'][1], info['battingfields'][2], info['battingfields'][3], info['battingfields'][4]]\n",
        "        \n",
        "    \n",
        "    career_stats=aggregate_by_player_id(statistics, playerid, fields)\n",
        "    \n",
        "    new_stats=[] #Convert career_stats from a dictionary of dictionaries\n",
        "    #into a list of dicts.\n",
        "    for key,value in career_stats.items():\n",
        "        new_stats.append(value)\n",
        "    \n",
        "    #print(new_stats)\n",
        "    top_ids_and_stats=top_player_ids(info, new_stats, formula, numplayers) \n",
        "\n",
        "    list_of_strings=lookup_player_names(info, top_ids_and_stats)\n",
        "    \n",
        "    return list_of_strings\n",
        "    \n",
        "\n",
        "\n",
        "def test_baseball_statistics():\n",
        "    baseballdatainfo = {\"masterfile\": \"Master_2016.csv\",   # Name of Master CSV file\n",
        "                        \"battingfile\": \"Batting_2016.csv\", # Name of Batting CSV file\n",
        "                        \"separator\": \",\",                  # Separator character in CSV files\n",
        "                        \"quote\": '\"',                      # Quote character in CSV files\n",
        "                        \"playerid\": \"playerID\",            # Player ID field name\n",
        "                        \"firstname\": \"nameFirst\",          # First name field name\n",
        "                        \"lastname\": \"nameLast\",            # Last name field name\n",
        "                        \"yearid\": \"yearID\",                # Year field name\n",
        "                        \"atbats\": \"AB\",                    # At bats field name\n",
        "                        \"hits\": \"H\",                       # Hits field name\n",
        "                        \"doubles\": \"2B\",                   # Doubles field name\n",
        "                        \"triples\": \"3B\",                   # Triples field name\n",
        "                        \"homeruns\": \"HR\",                  # Home runs field name\n",
        "                        \"walks\": \"BB\",                     # Walks field name\n",
        "                        \"battingfields\": [\"AB\", \"H\", \"2B\", \"3B\", \"HR\", \"BB\"]}\n",
        "\n",
        "    print(\"Top 5 batting averages in 1923\")\n",
        "    top_batting_average_1923 = compute_top_stats_year(baseballdatainfo, batting_average, 5, 1923)\n",
        "    for player in top_batting_average_1923:\n",
        "        print(player)\n",
        "    print(\"\")\n",
        "\n",
        "    print(\"Top 10 batting averages in 2010\")\n",
        "    top_batting_average_2010 = compute_top_stats_year(baseballdatainfo, batting_average, 10, 2010)\n",
        "    for player in top_batting_average_2010:\n",
        "        print(player)\n",
        "    print(\"\")\n",
        "\n",
        "    print(\"Top 10 on-base percentage in 2010\")\n",
        "    top_onbase_2010 = compute_top_stats_year(baseballdatainfo, onbase_percentage, 10, 2010)\n",
        "    for player in top_onbase_2010:\n",
        "        print(player)\n",
        "    print(\"\")\n",
        "\n",
        "    print(\"Top 10 slugging percentage in 2010\")\n",
        "    top_slugging_2010 = compute_top_stats_year(baseballdatainfo, slugging_percentage, 10, 2010)\n",
        "    for player in top_slugging_2010:\n",
        "        print(player)\n",
        "    print(\"\")\n",
        "\n",
        "    print(\"Top 10 OPS in 2010\")\n",
        "    top_ops_2010 = compute_top_stats_year(baseballdatainfo,\n",
        "                                          lambda info, stats: (onbase_percentage(info, stats) +\n",
        "                                                               slugging_percentage(info, stats)),\n",
        "                                          10, 2010)\n",
        "    for player in top_ops_2010:\n",
        "        print(player)\n",
        "    print(\"\")\n",
        "\n",
        "    print(\"Top 20 career batting averages\")\n",
        "    top_batting_average_career = compute_top_stats_career(baseballdatainfo, batting_average, 20)\n",
        "    for player in top_batting_average_career:\n",
        "        print(player)\n",
        "    print(\"\")\n",
        "\n",
        "\n",
        "\n",
        "test_baseball_statistics()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "L4yMNMz0lLIW",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 3,
      "outputs": []
    }
  ]
}